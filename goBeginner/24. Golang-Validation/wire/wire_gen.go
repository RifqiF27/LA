// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"net/http"
	"os"
	"travelika/database"
	"travelika/handler"
	"travelika/repository"
	"travelika/router"
	"travelika/service"
)

// Injectors from wire.go:

func InitializeRouterHandler() (http.Handler, error) {
	db := database.NewPostgresDB()
	userRepository := repository.NewUserRepo(db)
	sessionRepository := repository.NewSessionRepository(db)
	userService := service.NewUserService(userRepository, sessionRepository)
	authHandler := handler.NewAuthHandler(userService)
	logger, err := ProvideLogger()
	if err != nil {
		return nil, err
	}
	destinationRepository := repository.NewDestinationRepository(db, logger)
	destinationService := service.NewDestinationService(destinationRepository)
	destinationHandler := handler.NewDestinationHandler(destinationService, logger)
	transactionsRepository := repository.NewTransactionRepository(db, logger)
	transactionService := service.NewTransactionService(transactionsRepository)
	transactionHandler := handler.NewTransactionHandler(transactionService, logger)
	httpHandler := router.NewRouter(authHandler, destinationHandler, transactionHandler, logger)
	return httpHandler, nil
}

// wire.go:

func ProvideLogger() (*zap.Logger, error) {

	file, err := os.OpenFile("app.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return nil, err
	}

	core := zapcore.NewTee(zapcore.NewCore(zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()), zapcore.AddSync(file), zap.InfoLevel), zapcore.NewCore(zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig()), zapcore.AddSync(os.Stdout), zap.InfoLevel),
	)

	logger := zap.New(core)
	return logger, nil
}
