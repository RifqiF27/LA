// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"book-store/database"
	"book-store/handler"
	"book-store/repository"
	"book-store/router"
	"book-store/service"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"net/http"
	"os"
)

// Injectors from wire.go:

func InitializeRouterHandler() (http.Handler, error) {
	db := database.NewPostgresDB()
	userRepository := repository.NewUserRepo(db)
	userService := service.NewUserService(userRepository)
	authHandler := handler.NewAuthHandler(userService)
	logger, err := ProvideLogger()
	if err != nil {
		return nil, err
	}
	bookRepository := repository.NewBookRepository(db, logger)
	bookService := service.NewBookService(bookRepository, logger)
	bookHandler := handler.NewBookHandler(bookService, logger)
	paymentMethodRepository := repository.NewPaymentMethodRepository(db, logger)
	paymentMethodService := service.NewPaymentMethodService(paymentMethodRepository)
	paymentMethodHandler := handler.NewPaymentMethodHandler(paymentMethodService, logger)
	httpHandler := router.NewRouter(authHandler, bookHandler, paymentMethodHandler)
	return httpHandler, nil
}

// wire.go:

func ProvideLogger() (*zap.Logger, error) {

	file, err := os.OpenFile("app.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return nil, err
	}

	core := zapcore.NewTee(zapcore.NewCore(zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()), zapcore.AddSync(file), zap.InfoLevel), zapcore.NewCore(zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig()), zapcore.AddSync(os.Stdout), zap.InfoLevel),
	)

	logger := zap.New(core)
	return logger, nil
}
